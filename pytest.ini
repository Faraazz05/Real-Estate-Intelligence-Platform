# =============================================================================
# REAL ESTATE INTELLIGENCE PLATFORM - PYTEST CONFIGURATION
# =============================================================================
# Comprehensive testing configuration for ML platform with Flask web app
# Optimized for data science workflows and production-grade testing

[pytest]

# =============================================================================
# BASIC CONFIGURATION
# =============================================================================
# Minimum pytest version required
minversion = 7.0

# Test discovery paths
testpaths = 
    tests
    tests/unit
    tests/integration

# Python file patterns for test discovery
python_files = 
    test_*.py
    *_test.py

# Python class patterns for test discovery
python_classes = 
    Test*
    *Tests

# Python function patterns for test discovery
python_functions = 
    test_*

# =============================================================================
# COMMAND LINE OPTIONS (addopts)
# =============================================================================
# Default command line options applied to all test runs
addopts = 
    --verbose
    --tb=short
    --strict-markers
    --strict-config
    --disable-warnings
    --color=yes
    --durations=10
    --cov=src
    --cov=web_app
    --cov-report=html:htmlcov
    --cov-report=term-missing
    --cov-report=xml
    --cov-fail-under=85
    --junitxml=reports/junit.xml

# =============================================================================
# CUSTOM MARKERS
# =============================================================================
# Define custom markers for test categorization
markers =
    unit: Unit tests for individual components
    integration: Integration tests for system workflows
    slow: Slow-running tests (deselect with '-m "not slow"')
    fast: Fast-running tests (select with '-m fast')
    data_pipeline: Tests for data generation and processing
    ml_pipeline: Tests for machine learning components
    web_app: Tests for Flask web application
    api: Tests for REST API endpoints
    database: Tests requiring database connection
    external_api: Tests requiring external API calls
    regression: Regression tests for price prediction
    recommendation: Tests for recommendation engine
    analytics: Tests for market analysis and trends
    visualization: Tests for chart and map generation
    monitoring: Tests for model monitoring and alerts
    deployment: Tests for deployment and infrastructure
    performance: Performance and load tests
    security: Security-related tests
    smoke: Smoke tests for basic functionality
    critical: Critical path tests that must always pass
    experimental: Experimental features under development

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================
# Enable live logging during test execution
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s (%(filename)s:%(lineno)d)
log_cli_date_format = %Y-%m-%d %H:%M:%S

# File logging configuration
log_file = logs/pytest.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s (%(filename)s:%(lineno)d)
log_file_date_format = %Y-%m-%d %H:%M:%S

# Capture logging for assertions
log_capture = true
log_level = INFO

# =============================================================================
# DIRECTORIES AND PATHS
# =============================================================================
# Directories to ignore during test collection
norecursedirs = 
    .git
    .tox
    .env
    .venv
    venv
    env
    dist
    build
    south_migrations
    .pytest_cache
    htmlcov
    *.egg
    node_modules
    .idea
    .vscode
    __pycache__
    .mypy_cache
    notebooks
    data
    models/trained_models
    models/model_artifacts
    deployment
    monitoring

# Custom cache directory
cache_dir = .pytest_cache

# =============================================================================
# FILTERING AND WARNINGS
# =============================================================================
# Filter warnings during test execution
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::FutureWarning
    ignore:.*sklearn.*:FutureWarning
    ignore:.*pandas.*:FutureWarning
    ignore:.*numpy.*:FutureWarning
    ignore:.*tensorflow.*:FutureWarning
    ignore:.*matplotlib.*:UserWarning
    ignore:.*plotly.*:UserWarning
    error::pytest.PytestUnhandledCoroutineWarning

# =============================================================================
# PYTEST PLUGINS
# =============================================================================
# Required plugins for the test suite
required_plugins =
    pytest-cov>=4.0.0
    pytest-mock>=3.10.0
    pytest-xdist>=3.2.0
    pytest-html>=3.1.0
    pytest-json-report>=1.5.0

# Additional plugins to load
addinivalue_line = 
    markers slow: marks tests as slow (deselect with '-m "not slow"')

# =============================================================================
# PARALLEL EXECUTION
# =============================================================================
# Configure parallel test execution (when using pytest-xdist)
# Uncomment to enable parallel execution
# addopts = -n auto

# =============================================================================
# TIMEOUT CONFIGURATION
# =============================================================================
# Test timeout settings (requires pytest-timeout)
timeout = 300
timeout_method = thread

# =============================================================================
# HTML REPORTING
# =============================================================================
# HTML report configuration (requires pytest-html)
# Generated when using --html option
html_report_title = Real Estate Intelligence Platform Test Report
html_report_description = Comprehensive test results for ML-powered real estate analytics platform

# =============================================================================
# ENVIRONMENT VARIABLES
# =============================================================================
# Set environment variables for testing
env = 
    TESTING = true
    FLASK_ENV = testing
    DATABASE_URL = sqlite:///test_real_estate.db
    LOG_LEVEL = ERROR
    DISABLE_EXTERNAL_APIS = true
    MODEL_CACHE_DISABLED = true

# =============================================================================
# COLLECTION STRATEGY
# =============================================================================
# Test collection configuration
collect_ignore = [
    "setup.py",
    "conftest.py",
    "notebooks/",
    "data/",
    "models/",
    "deployment/",
]

# =============================================================================
# DOCTEST CONFIGURATION
# =============================================================================
# Configure doctest execution
doctest_optionflags = 
    NORMALIZE_WHITESPACE
    IGNORE_EXCEPTION_DETAIL
    ELLIPSIS

# Doctest file patterns
doctest_glob = *.rst

# =============================================================================
# JUNIT XML CONFIGURATION
# =============================================================================
# JUnit XML report configuration for CI/CD integration
junit_suite_name = real_estate_intelligence_platform
junit_logging = system-out
junit_log_passing_tests = false
junit_duration_report = total

# =============================================================================
# COVERAGE CONFIGURATION
# =============================================================================
# Additional coverage configuration (supplements --cov options above)
# Note: Detailed coverage config should be in .coveragerc or pyproject.toml

# =============================================================================
# MOCK AND FIXTURE CONFIGURATION
# =============================================================================
# Mock configuration for external dependencies
mock_use_standalone_module = true

# =============================================================================
# PERFORMANCE AND PROFILING
# =============================================================================
# Performance testing configuration
# Uncomment for performance profiling
# addopts = --profile --profile-svg

# =============================================================================
# CUSTOM PYTEST OPTIONS
# =============================================================================
# Custom options for specific test scenarios

# Data science specific options
ds_test_data_path = tests/fixtures/sample_data.csv
ml_model_path = tests/fixtures/test_models.pkl

# Flask app testing options
flask_test_client_class = tests.conftest.TestClient

# Database testing options
db_test_migrations = true
db_test_fixtures = tests/fixtures/

# =============================================================================
# DEVELOPMENT AND DEBUGGING
# =============================================================================
# Development-specific settings
# Uncomment for debugging
# addopts = --pdb --capture=no

# Enable assertion introspection
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# =============================================================================
# CI/CD SPECIFIC CONFIGURATION
# =============================================================================
# Configuration for continuous integration environments
# These can be overridden by environment-specific pytest configs

# GitHub Actions specific
# addopts = --maxfail=5 --disable-warnings

# Jenkins specific  
# addopts = --junitxml=reports/junit.xml --cov-report=xml

# Docker specific
# addopts = --no-header --tb=short -q
